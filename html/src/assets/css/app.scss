:root {
  /* 
  ----------------------------------------------------------------------------
  1.COLOR SETUP
    Our color token system consists of 4 layers: 

    1.1 Raw Colors (the primitive colors used as a foundation)
    1.2 Base Tokens (numbered nicknames for shades and highlights)
    1.3 Semantic Tokens (use cases, such as surfaces, borders, etc)
    1.4 Component Tokens (used to construct buttons, forms, etc)

    Even though we only have the light theme, this setup allows us to create a
    dark theme design by re-routing the custom CSS properties of Semantic
    Tokens under a media-query (e.g: “prefers-color-scheme: dark”).

    In our Figma file, we find parity of this system on the layers 1.1, 1.2, 
    1.3—whereas here lies a havier usage of the layer 1.4, components.

    To use our color tokens inside CSS classes, we wrap the color’s variable
    inside a hsl() functional notation (we use the version without commas)
    where we can add an optional alpha number for transparency effects
    (e.g: hsl(var(--color-surface) / .7)).
  ----------------------------------------------------------------------------
  */

  /* 1.1 COLORS: RAW COLORS */
  /* We have 11 base colors that make the entire design. They are exploded here
  so we can manipulate them with calc() to generate shades and highlights that
  are consistent on layer 1.2 - Base Tokens. The HEX values are there as a
  backup, for operations where HSL isn’t possible, but they should be avoided
  as much as we can since they are less flexible or descriptive. */

  /* Almost Black*/
  --almost-black-h:       0;
  --almost-black-s:       0%;
  --almost-black-l:       13%;
    --almost-black-hsl:   var(--almost-black-h) var(--almost-black-s) 
                          var(--almost-black-l);
    --almost-black:       var(--almost-black-hsl);
    --almost-black-hex:   #222222;

  /* Almost White*/
  --almost-white-h:       0;
  --almost-white-s:       0%;
  --almost-white-l:       96%;
    --almost-white-hsl:   var(--almost-white-h) var(--almost-white-s) 
                          var(--almost-white-l);
    --almost-white:       var(--almost-white-hsl);
    --almost-white-hex:   #F6F6F6;

  /* Black*/
  --black-h:              0;
  --black-s:              0%;
  --black-l:              0%;
    --black-hsl:          var(--black-h) var(--black-s) var(--black-l);
    --black:              var(--black-hsl);
    --black-hex:          #000000;

  /* Blue*/
  --blue-h:               204;
  --blue-s:               84%;
  --blue-l:               90%;
    --blue-hsl:           var(--blue-h) var(--blue-s) var(--blue-l);
    --blue:               var(--blue-hsl);
    --blue-hex:           #D0EAFB;

  /* Cream*/
  --cream-h:              60;
  --cream-s:              17%;
  --cream-l:              93%;
    --cream-hsl:          var(--cream-h) var(--cream-s) var(--cream-l);
    --cream:              var(--cream-hsl);
    --cream-hex:          #F0F0EA;

  /* Gray*/
  --gray-h:               276;
  --gray-s:               12%;
  --gray-l:               92%;
    --gray-hsl:           var(--gray-h) var(--gray-s) var(--gray-l);
    --gray:               var(--gray-hsl);
    --gray-hex:           #EBE8ED;

  /* Green*/
  --green-h:              161;
  --green-s:              81%;
  --green-l:              58%;
    --green-hsl:          var(--green-h) var(--green-s) var(--green-l);
    --green:              var(--green-hsl);
    --green-hex:          #3DEBB3;

  /* Orange*/
  --orange-h:             18;
  --orange-s:             83%;
  --orange-l:             61%;
    --orange-hsl:         var(--orange-h) var(--orange-s) var(--orange-l);
    --orange:             var(--orange-hsl);
    --orange-hex:         #EE7A49;

  /* Purple*/
  --purple-h:             277;
  --purple-s:             49%;
  --purple-l:             55%;
    --purple-hsl:         var(--purple-h) var(--purple-s) var(--purple-l);
    --purple:             var(--purple-hsl);
    --purple-hex:         #9954C4;

  /* Red*/
  --red-h:                348;
  --red-s:                81%;
  --red-l:                57%;
    --red-hsl:            var(--red-h) var(--red-s) var(--red-l);
    --red:                var(--red-hsl);
    --red-hex:            #EA395B;

  /* White*/
  --white-h:              0;
  --white-s:              0%;
  --white-l:              100%;
    --white-hsl:          var(--white-h) var(--white-s) var(--white-l);
    --white:              var(--white-hsl);
    --white-hex:          #FFFFFF;

  /* Yellow*/
  --yellow-h:             58;
  --yellow-s:             100%;
  --yellow-l:             70%;
    --yellow-hsl:         var(--yellow-h) var(--yellow-s) var(--yellow-l);
    --yellow:             var(--yellow-hsl);
    --yellow-hex:         #FFFA66;


  /* 1.2 COLORS: BASE TOKENS */
  /* We derive raw colors variants and give them numbered nicknames based on a
  consistent nomenclature. 

  In our case, we are being inspired by the way font-weight works (200 is extra
  light, 400 is regular, 700 bold) and design systems such as Material Design,
  so any color nicknamed with a 400 is exactly the same as the raw color it
  referrs to, whereas its 200 variant is a lighter version of that raw color 
  and the 700 variant is a darker version. 

  We are using calc() to generate these variations in a consistent manner
  through variables (but we can break away from them when needed).

  We can create in-between values (50, 100, 300, 350, 600, etc) as needed.
  */

  --base-token-variation-value:    15%;
  --base-token-variation-value-xs: 5%;

  /* Almost Black: Variants */
  --color-almost-black-200: 
      var(--almost-black-h) var(--almost-black-s) 
      calc(var(--almost-black-l) + var(--base-token-variation-value));

  --color-almost-black-400: var(--almost-black);

  --color-almost-black-700: 
        var(--almost-black-h) var(--almost-black-s) 
        calc(var(--almost-black-l) - var(--base-token-variation-value));

  /* Almost White: Variants */
  --color-almost-white-200: 
      var(--almost-white-h) var(--almost-white-s) 
      calc(var(--almost-white-l) + var(--base-token-variation-value));

  --color-almost-white-400: var(--almost-white);

  --color-almost-white-700:  
        var(--almost-white-h) var(--almost-white-s) 
        calc(var(--almost-white-l) - var(--base-token-variation-value));

  /* Black: Variants */
  --color-black-200: 
      var(--black-h) var(--black-s) 
      calc(var(--black-l) + var(--base-token-variation-value));

  --color-black-400: var(--black);

  /* Blue: Variants */
  --color-blue-200: 
      var(--blue-h) var(--blue-s) 
      calc(var(--blue-l) + var(--base-token-variation-value-xs));

  --color-blue-400: var(--blue);

  --color-blue-700: 
        var(--blue-h) var(--blue-s) 
        calc(var(--blue-l) - var(--base-token-variation-value));

  /* Cream: Variants */
  --color-cream-200: 
      var(--cream-h) var(--cream-s) 
      calc(var(--cream-l) + var(--base-token-variation-value));

  --color-cream-400: var(--cream);

  --color-cream-700: 
        var(--cream-h) var(--cream-s) 
        calc(var(--cream-l) - var(--base-token-variation-value));

  /* Gray: Variants */
  --color-gray-200: 
      var(--gray-h) var(--gray-s) 
      calc(var(--gray-l) + var(--base-token-variation-value-xs));

  --color-gray-400: var(--gray);

  --color-gray-700: 
        var(--gray-h) var(--gray-s) 
        calc(var(--gray-l) - var(--base-token-variation-value));
  
  --color-gray-900: 
        var(--gray-h) var(--gray-s) 
        calc(var(--gray-l) - calc(var(--base-token-variation-value) + 20));

  /* Green: Variants */
  --color-green-200: 
      var(--green-h) var(--green-s) 
      calc(var(--green-l) + var(--base-token-variation-value));

  --color-green-400: var(--green);

  --color-green-700: 
        var(--green-h) var(--green-s) 
        calc(var(--green-l) - var(--base-token-variation-value));

  /* Orange: Variants */
  --color-orange-200: 
      var(--orange-h) var(--orange-s) 
      calc(var(--orange-l) + var(--base-token-variation-value));

  --color-orange-400: var(--orange);

  --color-orange-700: 
        var(--orange-h) var(--orange-s) 
        calc(var(--orange-l) - var(--base-token-variation-value));

  /* Purple: Variants */
  --color-purple-200: 
      var(--purple-h) var(--purple-s) 
      calc(var(--purple-l) + var(--base-token-variation-value));

  --color-purple-400: var(--purple);

  --color-purple-700: 
        var(--purple-h) var(--purple-s) 
        calc(var(--purple-l) - var(--base-token-variation-value));

  /* Red: Variants */
  --color-red-200: 
      var(--red-h) var(--red-s) 
      calc(var(--red-l) + var(--base-token-variation-value));

  --color-red-400: var(--red);

  --color-red-700: 
        var(--red-h) var(--red-s) 
        calc(var(--red-l) - var(--base-token-variation-value));

  /* White: Variants */
  --color-white-400: var(--white);

  /* Yellow: Variants */
  --color-yellow-200: 
      var(--yellow-h) var(--yellow-s) 
      calc(var(--yellow-l) + var(--base-token-variation-value-xs));

  --color-yellow-400: var(--yellow);

  --color-yellow-700: 
        var(--yellow-h) var(--yellow-s) 
        calc(var(--yellow-l) - var(--base-token-variation-value));


  /* 1.3 COLORS: SEMANTIC TOKENS */
  /* These tokens point to specific use cases and can add more flexibility when theming the website (if that happens) since they can point to different color palettes/variations and still make sense semantically. */

  --color-primary:            var(--color-purple-400);
  --color-primary-variant:    var(--color-purple-200);

  --color-secondary:          var(--color-blue-400);
  --color-secondary-variant:  var(--color-blue-200);

  --color-ancillary:          var(--color-green-400);
  --color-ancillary-variant:  var(--color-green-200);

  --color-surface:            var(--color-almost-white-400);
  --color-surface-variant:    var(--color-white-400);
  --color-surface-elevated:   var(--color-cream-400);
  --color-surface-bright:     var(--color-orange-400);
  --color-surface-dark:       var(--color-almost-black-400);

  --color-content:            var(--color-almost-black-400);
  --color-content-inverted:   var(--color-almost-white-400);
  --color-content-muted:      var(--color-gray-900);

  --color-cta:                var(--color-yellow-400);

  --color-border:             var(--color-almost-black-400);


  /* 1.4 COLORS: COMPONENT TOKENS */
  /* These tokens are used to create self-contained elements and derive, mostly, from the previous layers. They aren’t tracked 1:1 in Figma due to their constant fluctuation.*/

  --button-filled-bg:         var(--color-blue-700);
  --button-filled-content:    var(--color-content);

  --herocard-bg:              var(--color-blue-400);
  --herocard-price-bg:        var(--color-yellow-400);
  --herocard-price-content:   var(--color-content);

  --tag-bg:                   var(--color-surface-dark);
  --tag-content:              var(--color-content);

  --categorycard-bg:          var(--color-surface);
  --categorycard-content:     var(--color-content);
  --categorycard-border:      var(--color-border);

  --citycard-bg:              var(--color-surface-dark);
  --citycard-content:         var(--color-content-inverted);
  --citycard-border:          var(--color-border);

  --footer-bg:                var(--color-black-400);
  --footer-content:           var(--color-almost-white-400);
  --footer-divider:           var(--color-black-200);

  /* 
    REMINDER:
    To use our color tokens inside CSS classes, we wrap the color’s variable
    inside a hsl() functional notation (we use the version without commas)
    where we can add an optional alpha number for transparency effects
    (e.g: hsl(var(--color-surface) / .7)).
  */


  /*
  ----------------------------------------------------------------------------
  2.TYPESETTING
    We are using Lexend Deca as the main typeface of the application with the following weights:

    300 - light
    400 - regular
    500 - medium
    700 - bold

    The file is being loaded through Google Font’s CDN, but in our app/assets/type folder we can find the .woff2 file as a backup:

    @font-face {
      font-family: 'Lexend Deca';
      font-display: swap;
      font-weight: 300 700;
      src: url('../type/lexend-deca-variable.woff2') format('woff2');
    }

    Following the nomenclaruture of weight, we define the sizes based on a type
    scale with the 16px (1em) as a base. Each size is them multiplied by 1.250 to generate the next value. Therefore our (rounded) type scale consists of:

    › Size #100: 8px size over  12px leading (0.5rem over 0.75 line-height)
    › Size #200: 10px size over 16px leading (0.62rem over 1.6 line-height)
    › Size #300: 12px size over 20px leading (0.75rem over 1.66 line-height)
    › Size #400: 16px size over 24px leading (1rem over 1.5 line-height)
    › Size #500: 20px size over 32px leading (1.25rem over 1.6 line-height)
    › Size #600: 24px size over 40px leading (1.5rem over 1.66 line-height)
    › Size #700: 32px size over 48px leading (2rem over 1.5 line-height)
    › Size #800: 40px size over 60px leading (2.5rem over 1.5 line-height)
    › Size #900: 48px size over 68px leading (3rem over 1.41 line-height)

    @ How is the line-height chosen?
      The designer will test how the text works with the different font-sizes 
      generated by the type scale, using factors from the base value (in 
      our case 16—so factors are 1, 2, 4, 8 and 16) as a way to separate text
      vertically. This should fit well with the grid point value chosen for 
      organizing the screen (in our case, 8).
 
    @ How is line-height calculated for the web?

        leading value in Figma (e.g: 40) / font-size in Figma (e.g: 24px) = 1.6 

    Then instead of using `px` units for font-sizes (they are less accessible),
    we convert px into `em` units (by diving the value in pixels by the default 
    browser font-size, 16—e.g: 20px / 16 = 1.25em) and declare as `rem` instead
    (while line-height should not have any units attached to it, ideally).
    Although `em` is a good unit in certain occasions, for typography its best 
    if we use `rem` for its predictability.
  ----------------------------------------------------------------------------
  */

  --typeface-default:      'Lexend Deca', 
                           'Helvetica Neue', helvetica, 'Segoe UI', 'Apple Color Emoji', arial, sans-serif;

  --root-fontsize: 1em;

  --font-size-8px:  0.5rem;
  --font-size-10px: 0.62rem;
  --font-size-12px: 0.75rem;
  --font-size-16px: 1rem;
  --font-size-20px: 1.25rem;
  --font-size-24px: 1.5rem;
  --font-size-32px: 2rem;
  --font-size-40px: 2.5rem;
  --font-size-48px: 3rem;

  --font-size-clamp-factor: 5vw - 2rem;
  /* Min values end at 960 px. Max values starts at 1040px */

  --text-size-100: var(--font-size-8px);
  --text-size-200: var(--font-size-10px);
  --text-size-300: var(--font-size-12px);
  --text-size-400: clamp(var(--font-size-16px), 
                        var(--font-size-clamp-factor), 
                        var(--font-size-20px));
  --text-size-500: clamp(var(--font-size-20px), 
                        var(--font-size-clamp-factor), 
                        var(--font-size-24px));
  --text-size-600: clamp(var(--font-size-24px), 
                        var(--font-size-clamp-factor), 
                        var(--font-size-32px));
  --text-size-700: clamp(var(--font-size-32px), 
                        var(--font-size-clamp-factor), 
                        var(--font-size-40px));
  --text-size-800: clamp(var(--font-size-40px), 
                        var(--font-size-clamp-factor), 
                        var(--font-size-48px));
  --text-size-900: var(--font-size-48px);


  /*
  ----------------------------------------------------------------------------
  3.SPACING
    We are using Lexend Deca as the main typeface of the application with the following weights:
  */

  /* this is based on our grid and is used as a fallback. Values can be rewritten if needed */

  --spacing-default: 1rem; /* 16px */

  --spacing-4:     calc(var(--spacing-default) / 4);
  --spacing-8:     calc(var(--spacing-default) / 2);
  --spacing-12:    calc(var(--spacing-default) / 1.33);
  --spacing-16:    var(--spacing-default);
  --spacing-24:    calc(var(--spacing-default) * 1.5);
  --spacing-32:    calc(var(--spacing-default) * 2);
  --spacing-48:    calc(var(--spacing-default) * 3);
  --spacing-64:    calc(var(--spacing-default) * 4);
  --spacing-80:    calc(var(--spacing-default) * 5);
}

/* ////////////////////////
  HELLOO
\\\\\\\\\\\\\\\\\\\\\\\\\*/

html {
  font-size:              var(--root-fontsize);
}

body {
  font-family:            var(--typeface-default);
  color:                  hsl(var(--color-content));
}

main {
  min-height:             100vh;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 700;
}

/* UTILITIES */
/*text sizes */
.text-size-100 {
  font-size:      var(--text-size-100);
  line-height:    1.2;
}

.text-size-200 {
  font-size:      var(--text-size-200);
  line-height:    1.6;
}

.text-size-300 {
  font-size:      var(--text-size-300);
  line-height:    1.66; 
}

.text-size-400 {
  font-size:      var(--text-size-400);
  line-height:    clamp(1.5, var(--font-size-clamp-factor), 1.6);
}

.text-size-500 {
  font-size:      var(--text-size-500);
  line-height:    clamp(1.6, var(--font-size-clamp-factor), 1.66);
}

.text-size-600 {
  font-size:      var(--text-size-600);
  line-height:    clamp(1.66, var(--font-size-clamp-factor), 1.5);
}

.text-size-700 {
  font-size:      var(--text-size-700);
  line-height:    1.25;
}

.text-size-800 {
  font-size:      var(--text-size-800);
  line-height:    1.25;
}

.text-size-900 {
  font-size:      var(--text-size-900);
  line-height:    1.25;
}

.font-weight-700 {
  font-weight: 700;
}

.heading-balance {
  text-wrap: balance;
}


/* flexbox */
.flex { display: flex; }
.align-items-center { align-items: center; }
.space-between { justify-content: space-between; }

/* spacing */
.spacing > *:where(:not(:first-child)) {
  margin-top: var(--space, var(--spacing-default)); 
  outline: 1px solid red;
}

.padding-all-100     { padding: var(--spacing-4); }
.padding-block-100   { padding-block:  var(--spacing-4); }
.padding-inline-100  { padding-inline: var(--spacing-4); }
.padding-top-100     { padding-top: var(--spacing-4); }
.padding-bottom-100  { padding-bottom: var(--spacing-4); }
.padding-left-100    { padding-left: var(--spacing-4); }
.padding-right-100   { padding-right: var(--spacing-4); }

.padding-all-200     { padding: var(--spacing-8); }
.padding-block-200   { padding-block:  var(--spacing-8); }
.padding-inline-200  { padding-inline: var(--spacing-8); }
.padding-top-200     { padding-top: var(--spacing-8); }
.padding-bottom-200  { padding-bottom: var(--spacing-8); }
.padding-left-200    { padding-left: var(--spacing-8); }
.padding-right-200   { padding-right: var(--spacing-8); }

.padding-all-300     { padding: var(--spacing-12); }
.padding-block-300   { padding-block:  var(--spacing-12); }
.padding-inline-300  { padding-inline: var(--spacing-12); }
.padding-top-300     { padding-top: var(--spacing-12); }
.padding-bottom-300  { padding-bottom: var(--spacing-12); }
.padding-left-300    { padding-left: var(--spacing-12); }
.padding-right-300   { padding-right: var(--spacing-12); }

.padding-all-400     { padding: var(--spacing-default); }
.padding-block-400   { padding-block:  var(--spacing-default); }
.padding-inline-400  { padding-inline: var(--spacing-default); }
.padding-top-400     { padding-top: var(--spacing-default); }
.padding-bottom-400  { padding-bottom: var(--spacing-default); }
.padding-left-400    { padding-left: var(--spacing-default); }
.padding-right-400   { padding-right: var(--spacing-default); }

.padding-all-500     { padding: var(--spacing-24); }
.padding-block-500   { padding-block:  var(--spacing-24); }
.padding-inline-500  { padding-inline: var(--spacing-24); }
.padding-top-500     { padding-top: var(--spacing-24); }
.padding-bottom-500  { padding-bottom: var(--spacing-24); }
.padding-left-500    { padding-left: var(--spacing-24); }
.padding-right-500   { padding-right: var(--spacing-24); }

.padding-all-600     { padding: var(--spacing-32); }
.padding-block-600   { padding-block:  var(--spacing-32); }
.padding-inline-600  { padding-inline: var(--spacing-32); }
.padding-top-600     { padding-top: var(--spacing-32); }
.padding-bottom-600  { padding-bottom: var(--spacing-32); }
.padding-left-600    { padding-left: var(--spacing-32); }
.padding-right-600   { padding-right: var(--spacing-32); }

.padding-all-700     { padding: var(--spacing-48); }
.padding-block-700   { padding-block:  var(--spacing-48); }
.padding-inline-700  { padding-inline: var(--spacing-48); }
.padding-top-700     { padding-top: var(--spacing-48); }
.padding-bottom-700  { padding-bottom: var(--spacing-48); }
.padding-left-700    { padding-left: var(--spacing-48); }
.padding-right-700   { padding-right: var(--spacing-48); }

.padding-all-800     { padding: var(--spacing-64); }
.padding-block-800   { padding-block:  var(--spacing-64); }
.padding-inline-800  { padding-inline: var(--spacing-64); }
.padding-top-800     { padding-top: var(--spacing-64); }
.padding-bottom-800  { padding-bottom: var(--spacing-64); }
.padding-left-800    { padding-left: var(--spacing-64); }
.padding-right-800   { padding-right: var(--spacing-64); }

.padding-all-900     { padding: var(--spacing-80); }
.padding-block-900   { padding-block:  var(--spacing-80); }
.padding-inline-900  { padding-inline: var(--spacing-80); }
.padding-top-900     { padding-top: var(--spacing-80); }
.padding-bottom-900  { padding-bottom: var(--spacing-80); }
.padding-left-900    { padding-left: var(--spacing-80); }
.padding-right-900   { padding-right: var(--spacing-80); }

.margin-all-100     { margin: var(--spacing-4); }
.margin-block-100   { margin-block:  var(--spacing-4); }
.margin-inline-100  { margin-inline: var(--spacing-4); }
.margin-top-100     { margin-top: var(--spacing-4); }
.margin-bottom-100  { margin-bottom: var(--spacing-4); }
.margin-left-100    { margin-left: var(--spacing-4); }
.margin-right-100   { margin-right: var(--spacing-4); }

.margin-all-200     { margin: var(--spacing-8); }
.margin-block-200   { margin-block:  var(--spacing-8); }
.margin-inline-200  { margin-inline: var(--spacing-8); }
.margin-top-200     { margin-top: var(--spacing-8); }
.margin-bottom-200  { margin-bottom: var(--spacing-8); }
.margin-left-200    { margin-left: var(--spacing-8); }
.margin-right-200   { margin-right: var(--spacing-8); }

.margin-all-300     { margin: var(--spacing-12); }
.margin-block-300   { margin-block:  var(--spacing-12); }
.margin-inline-300  { margin-inline: var(--spacing-12); }
.margin-top-300     { margin-top: var(--spacing-12); }
.margin-bottom-300  { margin-bottom: var(--spacing-12); }
.margin-left-300    { margin-left: var(--spacing-12); }
.margin-right-300   { margin-right: var(--spacing-12); }

.margin-all-400     { margin: var(--spacing-default); }
.margin-block-400   { margin-block:  var(--spacing-default); }
.margin-inline-400  { margin-inline: var(--spacing-default); }
.margin-top-400     { margin-top: var(--spacing-default); }
.margin-bottom-400  { margin-bottom: var(--spacing-default); }
.margin-left-400    { margin-left: var(--spacing-default); }
.margin-right-400   { margin-right: var(--spacing-default); }

.margin-all-500     { margin: var(--spacing-24); }
.margin-block-500   { margin-block:  var(--spacing-24); }
.margin-inline-500  { margin-inline: var(--spacing-24); }
.margin-top-500     { margin-top: var(--spacing-24); }
.margin-bottom-500  { margin-bottom: var(--spacing-24); }
.margin-left-500    { margin-left: var(--spacing-24); }
.margin-right-500   { margin-right: var(--spacing-24); }

.margin-all-600     { margin: var(--spacing-32); }
.margin-block-600   { margin-block:  var(--spacing-32); }
.margin-inline-600  { margin-inline: var(--spacing-32); }
.margin-top-600     { margin-top: var(--spacing-32); }
.margin-bottom-600  { margin-bottom: var(--spacing-32); }
.margin-left-600    { margin-left: var(--spacing-32); }
.margin-right-600   { margin-right: var(--spacing-32); }

.margin-all-700     { margin: var(--spacing-48); }
.margin-block-700   { margin-block:  var(--spacing-48); }
.margin-inline-700  { margin-inline: var(--spacing-48); }
.margin-top-700     { margin-top: var(--spacing-48); }
.margin-bottom-700  { margin-bottom: var(--spacing-48); }
.margin-left-700    { margin-left: var(--spacing-48); }
.margin-right-700   { margin-right: var(--spacing-48); }

.margin-all-800     { margin: var(--spacing-64); }
.margin-block-800   { margin-block:  var(--spacing-64); }
.margin-inline-800  { margin-inline: var(--spacing-64); }
.margin-top-800     { margin-top: var(--spacing-64); }
.margin-bottom-800  { margin-bottom: var(--spacing-64); }
.margin-left-800    { margin-left: var(--spacing-64); }
.margin-right-800   { margin-right: var(--spacing-64); }

.margin-all-900     { margin: var(--spacing-80); }
.margin-block-900   { margin-block:  var(--spacing-80); }
.margin-inline-900  { margin-inline: var(--spacing-80); }
.margin-top-900     { margin-top: var(--spacing-80); }
.margin-bottom-900  { margin-bottom: var(--spacing-80); }
.margin-left-900    { margin-left: var(--spacing-80); }
.margin-right-900   { margin-right: var(--spacing-80); }


/* aligning */
.text-align-center { text-align: center;}

/* colors */
.color-content-inverted { color: hsl(var(--color-content-inverted)); }
.bg-color-primary { background-color: hsl(var(--color-primary)); }
.bg-color-ancillary { background-color: hsl(var(--color-ancillary)); }
.bg-color-surface { background-color: hsl(var(--color-surface)); }

/* COMPONENTS */
.primary-footer {
  background-color: hsl(var(--footer-bg));
  color: hsl(var(--footer-content));
  position: sticky;
  top: 100%;
}

.primary-header .logo {
  display: block;
  width: 5rem;
}

.primary-header ul {
  list-style-type: none;
}

.primary-header a {
  text-decoration: none;
}

.hero-header {
  font-size: var(--text-size-600);
  line-height: 1.16;
}

.usp-list {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  gap: 1rem;
  overflow-x: auto;
  scrollbar-width: none;
  text-align: center;

  background-image: linear-gradient(
    to bottom,
    hsl(var(--color-primary)) 0 10%,
    hsl(var(--color-primary)) 10% 20%,
    hsl(var(--color-ancillary)) 20% 50%,
    hsl(var(--color-ancillary))
    );
}

.usp-list li {
  list-style-type: none;
  min-width: 15rem;
  max-width: 30rem;
  overflow: hidden;
  padding-block: var(--spacing-24);
  padding-inline: var(--spacing-16);
}

.usp-list img {
  width: 4.5rem;
  margin: 0 auto;
}

.video-home {
  margin-bottom: var(--spacing-24);
}
