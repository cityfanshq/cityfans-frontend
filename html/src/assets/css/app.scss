:root {
  /* 
  ----------------------------------------------------------------------------
  1.COLOR SETUP
    Our color token system consists of 4 layers: 

    1.1 Raw Colors (the primitive colors used as a foundation)
    1.2 Base Tokens (numbered nicknames for shades and highlights)
    1.3 Semantic Tokens (use cases, such as surfaces, borders, etc)
    1.4 Component Tokens (used to construct buttons, forms, etc)

    Even though we only have the light theme, this setup allows us to create a
    dark theme design by re-routing the custom CSS properties of Semantic
    Tokens under a media-query (“preferes-color-scheme: dark”).

    In our Figma file, we find parity of this system on the layers 1.1, 1.2, 
    1.3—whereas here there is the definition of layer 1.4, components.
  ----------------------------------------------------------------------------
  */

  /* 1.1 COLORS: RAW COLORS */
  /* We have 11 base colors that make the entire design. They are exploded here
  so we can manipulate them with calc() to generate shades and highlights that
  are consistent on layer 1.2 - Base Tokens. The HEX values are there as a
  backup, for operations where HSL isn’t possible, but they should be avoided
  as much as we can since they are less flexible or descriptive. */

  /* Almost Black*/
  --almost-black-h:       0;
  --almost-black-s:       0%;
  --almost-black-l:       13%;
    --almost-black-hsl:   var(--almost-black-h), var(--almost-black-s), var(--almost-black-l);
    --almost-black:       hsl(var(--almost-black-hsl));
    --almost-black-hex: #222222;

  /* Almost White*/
  --almost-white-h:       0;
  --almost-white-s:       0%;
  --almost-white-l:       96%;
    --almost-white-hsl:   var(--almost-white-h), var(--almost-white-s), var(--almost-white-l);
    --almost-white:       hsl(var(--almost-white-hsl));
    --almost-white-hex: #F6F6F6;

  /* Black*/
  --black-h:       0;
  --black-s:       0%;
  --black-l:       0%;
    --black-hsl:   var(--black-h), var(--black-s), var(--black-l);
    --black:       hsl(var(--black-hsl));
    --black-hex: #000000;

  /* Blue*/
  --blue-h:       204;
  --blue-s:       84%;
  --blue-l:       90%;
    --blue-hsl:   var(--blue-h), var(--blue-s), var(--blue-l);
    --blue:       hsl(var(--blue-hsl));
    --blue-hex: #D0EAFB;

  /* Cream*/
  --cream-h:       60;
  --cream-s:       17%;
  --cream-l:       93%;
    --cream-hsl:   var(--cream-h), var(--cream-s), var(--cream-l);
    --cream:       hsl(var(--cream-hsl));
    --cream-hex: #F0F0EA;

  /* Gray*/
  --gray-h:       276;
  --gray-s:       12%;
  --gray-l:       92%;
    --gray-hsl:   var(--gray-h), var(--gray-s), var(--gray-l);
    --gray:       hsl(var(--gray-hsl));
    --gray-hex: #EBE8ED;

  /* Green*/
  --green-h:       161;
  --green-s:       81%;
  --green-l:       58%;
    --green-hsl:   var(--green-h), var(--green-s), var(--green-l);
    --green:       hsl(var(--green-hsl));
    --green-hex: #3DEBB3;

  /* Orange*/
  --orange-h:       18;
  --orange-s:       83%;
  --orange-l:       61%;
    --orange-hsl:   var(--orange-h), var(--orange-s), var(--orange-l);
    --orange:       hsl(var(--orange-hsl));
    --orange-hex: #EE7A49;

  /* Purple*/
  --purple-h:       277;
  --purple-s:       49%;
  --purple-l:       55%;
    --purple-hsl:   var(--purple-h), var(--purple-s), var(--purple-l);
    --purple:       hsl(var(--purple-hsl));
    --purple-hex: #9954C4;

  /* Red*/
  --red-h:       348;
  --red-s:       81%;
  --red-l:       57%;
    --red-hsl:   var(--red-h), var(--red-s), var(--red-l);
    --red:       hsl(var(--red-hsl));
    --red-hex: #EA395B;

  /* White*/
  --white-h:       0;
  --white-s:       0%;
  --white-l:       100%;
    --white-hsl:   var(--white-h), var(--white-s), var(--white-l);
    --white:       hsl(var(--white-hsl));
    --white-hex: #FFFFFF;

  /* Yellow*/
  --yellow-h:       58;
  --yellow-s:       100%;
  --yellow-l:       70%;
    --yellow-hsl:   var(--yellow-h), var(--yellow-s), var(--yellow-l);
    --yellow:       hsl(var(--yellow-hsl));
    --yellow-hex: #FFFA66;




  /* 1.2 COLORS: BASE TOKENS */
  /* We derive raw colors variants and give them numbered nicknames based on a
  consistent nomenclature. In our case, we are being inspired by the way
  font-weight works (200 is extra light, 400 is regular, 700 bold) and design
  systems such as Material Design, so any color nicknamed with a 400 is exactly
  the same as the raw color it referrs to, whereas its 200 variant is a lighter
  version of that raw color, and the 700 variant is a darker version. We are
  using calc() to generate these variations in a consistent manner through
  variables (but we can break away from them when needed).

  We can create in-between values (50, 100, 300, 350, 600, etc) as needed.
  */

  --base-token-variation-value:    15%;
  --base-token-variation-value-xs: 5%;

  /* Almost Black: Variants */
  --color-almost-black-200: 
    hsl(
      var(--almost-black-h), 
      var(--almost-black-s), 
      calc(var(--almost-black-l) + var(--base-token-variation-value)));

  --color-almost-black-400: var(--almost-black);

  --color-almost-black-700: 
    hsl(
        var(--almost-black-h), 
        var(--almost-black-s), 
        calc(var(--almost-black-l) - var(--base-token-variation-value)));

  /* Almost White: Variants */
  --color-almost-white-200: 
    hsl(
      var(--almost-white-h), 
      var(--almost-white-s), 
      calc(var(--almost-white-l) + var(--base-token-variation-value)));

  --color-almost-white-400: var(--almost-white);

  --color-almost-white-700: 
    hsl(
        var(--almost-white-h), 
        var(--almost-white-s), 
        calc(var(--almost-white-l) - var(--base-token-variation-value)));

  /* Black: Variants */
  --color-black-200: 
    hsl(
      var(--black-h), 
      var(--black-s), 
      calc(var(--black-l) + var(--base-token-variation-value)));

  --color-black-400: var(--black);

  /* Blue: Variants */
  --color-blue-200: 
    hsl(
      var(--blue-h), 
      var(--blue-s), 
      calc(var(--blue-l) + var(--base-token-variation-value-xs)));

  --color-blue-400: var(--blue);

  --color-blue-700: 
    hsl(
        var(--blue-h), 
        var(--blue-s), 
        calc(var(--blue-l) - var(--base-token-variation-value)));

  /* Cream: Variants */
  --color-cream-200: 
    hsl(
      var(--cream-h), 
      var(--cream-s), 
      calc(var(--cream-l) + var(--base-token-variation-value)));

  --color-cream-400: var(--cream);

  --color-cream-700: 
    hsl(
        var(--cream-h), 
        var(--cream-s), 
        calc(var(--cream-l) - var(--base-token-variation-value)));

  /* Gray: Variants */
  --color-gray-200: 
    hsl(
      var(--gray-h), 
      var(--gray-s), 
      calc(var(--gray-l) + var(--base-token-variation-value-xs)));

  --color-gray-400: var(--gray);

  --color-gray-700: 
    hsl(
        var(--gray-h), 
        var(--gray-s), 
        calc(var(--gray-l) - var(--base-token-variation-value)));
  
  --color-gray-900: 
    hsl(
        var(--gray-h), 
        var(--gray-s), 
        calc(var(--gray-l) - calc(var(--base-token-variation-value) + 20)));

  /* Green: Variants */
  --color-green-200: 
    hsl(
      var(--green-h), 
      var(--green-s), 
      calc(var(--green-l) + var(--base-token-variation-value)));

  --color-green-400: var(--green);

  --color-green-700: 
    hsl(
        var(--green-h), 
        var(--green-s), 
        calc(var(--green-l) - var(--base-token-variation-value)));

  /* Orange: Variants */
  --color-orange-200: 
    hsl(
      var(--orange-h), 
      var(--orange-s), 
      calc(var(--orange-l) + var(--base-token-variation-value)));

  --color-orange-400: var(--orange);

  --color-orange-700: 
    hsl(
        var(--orange-h), 
        var(--orange-s), 
        calc(var(--orange-l) - var(--base-token-variation-value)));

  /* Purple: Variants */
  --color-purple-200: 
    hsl(
      var(--purple-h), 
      var(--purple-s), 
      calc(var(--purple-l) + var(--base-token-variation-value)));

  --color-purple-400: var(--purple);

  --color-purple-700: 
    hsl(
        var(--purple-h), 
        var(--purple-s), 
        calc(var(--purple-l) - var(--base-token-variation-value)));

  /* Red: Variants */
  --color-red-200: 
    hsl(
      var(--red-h), 
      var(--red-s), 
      calc(var(--red-l) + var(--base-token-variation-value)));

  --color-red-400: var(--red);

  --color-red-700: 
    hsl(
        var(--red-h), 
        var(--red-s), 
        calc(var(--red-l) - var(--base-token-variation-value)));

  /* White: Variants */
  --color-white-400: var(--white);

  /* Yellow: Variants */
  --color-yellow-200: 
    hsl(
      var(--yellow-h), 
      var(--yellow-s), 
      calc(var(--yellow-l) + var(--base-token-variation-value-xs)));

  --color-yellow-400: var(--yellow);

  --color-yellow-700: 
    hsl(
        var(--yellow-h), 
        var(--yellow-s), 
        calc(var(--yellow-l) - var(--base-token-variation-value)));




  /* 1.3 COLORS: SEMANTIC TOKENS */
  /* These tokens point to specific use cases and can add more flexibility when theming the website (if that happens) since they can point to different color palettes/variations and still make sense semantically. 
  */

  --color-primary:           var(--color-purple-400);
  --color-primary-variant:   var(--color-purple-200);

  --color-secondary:         var(--color-blue-400);
  --color-secondary-variant: var(--color-blue-200);

  --color-ancillary:         var(--color-green-400);
  --color-ancillary-variant: var(--color-green-200);

  --color-surface:           var(--color-almost-white-400);
  --color-surface-variant:   var(--color-white-400);
  --color-surface-elevated:  var(--color-cream-400);
  --color-surface-bright:    var(--color-orange-400);
  --color-surface-dark:      var(--almost-black-400);

  --color-content:           var(--color-almost-black-400);
  --color-content-inverted:  var(--color-almost-white-400);
  --color-content-muted:     var(--color-gray-900);

  --color-cta:               var(--color-yellow-400);

  --color-border:            var(--almost-black-400);




  /* 1.4 COLORS: COMPONENT TOKENS */
  /* These tokens are used to create self-contained elements and derive, mostly, from the previous layers. They aren’t tracked 1:1 in Figma due to their constant fluctuation. 
  */

  --button-filled-bg:         var(--color-blue-700);
  --button-filled-content:    var(--color-content);

  --herocard-bg:              var(--color-blue-400);
  --herocard-price-bg:        var(--color-yellow-400);
  --herocard-price-content:   var(--color-content);

  --tag-bg:                   var(--color-surface-dark);
  --tag-content:              var(--color-content);

  --categorycard-bg:          var(--color-surface);
  --categorycard-content:     var(--color-content);
  --categorycard-border:      var(--color-border);

  --citycard-bg:              var(--color-surface-dark);
  --citycard-content:         var(--color-content-inverted);
  --citycard-border:          var(--color-border);

  /* footer should be dark even on dark mode */
  --footer-bg:                var(--color-black-400);
  --footer-content:           var(--color-almost-white-400);
  --footer-divider:           var(--color-black-200);



  /*
  ----------------------------------------------------------------------------
  2.TYPESETTING
    We are using Lexend Deca as the main typeface of the application with the following weights:

    300 - light
    400 - regular
    500 - medium
    700 - bold

    The file is being loaded through Google Font’s CDN, but in our app/assets/type folder we can find the .woff2 file as a backup:

    @font-face {
    font-family: 'Lexend Deca';
    font-display: swap;
    font-weight: 300 700;
    src: url('../type/lexend-deca-variable.woff2') format('woff2');
  }

  ----------------------------------------------------------------------------
  */

  --typeface-default-name: 'Lexend Deca';
  --typeface-default:      var(--typeface-default-name), 
                           'Helvetica Neue', helvetica, 'Segoe UI', 'Apple Color Emoji', arial, sans-serif;
}


/* ////////////////////////
  HELLOO
\\\\\\\\\\\\\\\\\\\\\\\\\*/

body {
  font-family: var(--typeface-default);
  color: var(--color-content);
  background-color: var(--color-surface-surface);
}